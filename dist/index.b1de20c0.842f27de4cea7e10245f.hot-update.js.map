{"version":3,"file":"index.b1de20c0.842f27de4cea7e10245f.hot-update.js","sources":["/Users/alfian/Documents/Project/OSS/extension/deadviz/src/visualizer/visualizer.js"],"sourcesContent":["/*global chrome*/\nimport React, {useEffect, useState} from \"react\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport duration from \"dayjs/plugin/duration\";\nimport DeadlineVisualizer from \"./deadlineVisualizer\";\nimport Welcome from \"./welcome\";\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nconst limitNumberOfBoxes = 30;\nconst day = \"day\";\nconst week = \"week\";\nconst month = \"month\";\nconst year = \"year\";\n\nconst chooseRandomDeadline = deadlines => {\n    const random = Math.ceil(Math.random() * 100);\n    const index = random % deadlines.length;\n\n    return parseData(deadlines[index]);\n};\n\nconst parseData = deadline => {\n    let startDate = dayjs(deadline.start);\n    let endDate = dayjs(deadline.end);\n    let timeUnit = day;\n    let diff = dayjs.duration(endDate.diff(startDate));\n    let numOfBoxes = Math.ceil(diff.asDays());\n    if (numOfBoxes > limitNumberOfBoxes) {\n        timeUnit = week;\n        numOfBoxes = Math.ceil(diff.asWeeks());\n    }\n\n    // if the number of boxes are still big, then convert it to month\n    if (numOfBoxes > limitNumberOfBoxes) {\n        timeUnit = month;\n        numOfBoxes = Math.ceil(diff.asMonths());\n    }\n\n    // still big, convert it to years\n    if (numOfBoxes > limitNumberOfBoxes) {\n        timeUnit = year;\n        numOfBoxes = Math.ceil(diff.asYears());\n    }\n\n    const now = dayjs();\n\n    let passedBoxCount = 0;\n\n    let boxes = [];\n\n    for (let i = 1; i <= numOfBoxes; i++) {\n        const remainingTime = startDate.from(now);\n        const passedTime = now.to(startDate);\n\n        if (startDate.isAfter(now)) {\n            boxes.push({passed: false, info: remainingTime});\n        } else {\n            passedBoxCount++;\n            boxes.push({passed: true, info: passedTime});\n        }\n\n        startDate = startDate.add(1, timeUnit);\n    }\n\n    const remaining = numOfBoxes - passedBoxCount;\n    const percentage = (passedBoxCount / numOfBoxes * 100).toFixed(2);\n    if (remaining > 1) {\n        timeUnit = `${timeUnit}s`;\n    }\n\n    return {\n        name: deadline.name,\n        boxes,\n        summary: `${remaining} ${timeUnit} remaining (${percentage}%)`\n    };\n};\n\nconst Visualizer = () => {\n    const [deadline, setDeadline] = useState({});\n    const [deadlineExists, setDeadlineExists] = useState(false);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        chrome.storage.sync.get('deadlines', data => {\n            if (!data) {\n                return\n            }\n\n            // check if any pinned deadline exists\n            if (!!data.pinned) {\n                setDeadline(parseData(data.pinned));\n                setDeadlineExists(true);\n                setLoading(false);\n                return\n            }\n\n            if (!!data && !!data.deadlines) {\n                setDeadline(chooseRandomDeadline(data.deadlines));\n                setDeadlineExists(true);\n            }\n\n            setLoading(false);\n        })\n    }, []);\n\n    if (loading) {\n        return <div></div>\n    }\n\n    return deadlineExists ? <DeadlineVisualizer deadline={deadline} /> : <Welcome />;\n}\n\nexport default Visualizer;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}
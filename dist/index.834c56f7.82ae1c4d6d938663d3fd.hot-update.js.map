{"version":3,"file":"index.834c56f7.82ae1c4d6d938663d3fd.hot-update.js","sources":["/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/menu.js"],"sourcesContent":["/*global chrome*/\nimport React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport {Tabs} from 'antd';\nimport DeadlineList from \"./deadlineList\";\nimport Submission from \"./submission\";\nimport {AimOutlined, BarsOutlined, SettingTwoTone} from '@ant-design/icons';\n\n\nconst {TabPane} = Tabs;\n\nconst StyledTabs = styled(Tabs)`\n    width: 300px;\n`;\n\nconst StyledSetting = styled(SettingTwoTone)`\n    margin-right: 16px;\n`;\n\nconst newTabURL = \"chrome://newtab/\";\n\nconst Menu = () => {\n    const [deadlines, setDeadlines] = useState([]);\n    const [existingPinnedDeadline, setExistingPinnedDeadline] = useState({});\n\n    useEffect(() => {\n        chrome.storage.sync.get('deadlines', data => {\n            if (!!data) {\n                return\n            }\n\n            if (!!data.pinned) {\n                setExistingPinnedDeadline(data.pinned);\n            }\n\n            if (!!data.deadlines) {\n                setDeadlines(data.deadlines);\n            }\n        });\n    })\n\n    const newTabReload = () => {\n        chrome.tabs.getCurrent(tab => {\n            if (tab.url === newTabURL) {\n                chrome.tabs.reload();\n            }\n        });\n    }\n\n    const handleDelete = (id, index) => {\n        const newDeadlines = [...deadlines.slice(0, index), ...deadlines.slice(index + 1)];\n        chrome.storage.sync.set({deadlines: newDeadlines}, () => {\n            console.log(`Deadline with ID ${id} has been deleted`);\n            setDeadlines(newDeadlines);\n            newTabReload();\n        });\n    }\n\n    const handleAdd = ({name, start, end}) => {\n        const deadline = {\n            id: Date.now(),\n            name,\n            start: start.toJSON(),\n            end: end.toJSON()\n        };\n\n        const newDeadlines = [...deadlines, deadline];\n\n        chrome.storage.sync.set({deadlines: newDeadlines}, function () {\n            console.log('new goal/plan has been added');\n            setDeadlines(newDeadlines);\n            newTabReload();\n        });\n    }\n\n    const handlePin = ({index}) => {\n        const pinnedDeadline = deadlines[index];\n        const newDeadlines = [...deadlines.slice(0, index), ...deadlines.slice(index + 1)];\n\n        // check if there is no existing pinned deadline\n        if (!isEmptyObject(existingPinnedDeadline)) {\n            newDeadlines.push(existingPinnedDeadline);\n        }\n\n        // if there is an existing pinned deadline then swap\n        chrome.storage.sync.set({\n            deadlines: newDeadlines,\n            pinned: pinnedDeadline,\n        }, function () {\n            console.log('a new pinned deadline has been set');\n            setExistingPinnedDeadline(pinnedDeadline)\n            setDeadlines(newDeadlines);\n            newTabReload();\n        });\n    };\n\n    const handleUnpin = () => {\n        if (isEmptyObject(existingPinnedDeadline)) {\n            return\n        }\n\n        deadlines.push(existingPinnedDeadline);\n        chrome.storage.sync.set({\n            deadlines,\n            pinned: {},\n        }, function () {\n            console.log('a new pinned deadline has been set');\n            setExistingPinnedDeadline({})\n            setDeadlines(newDeadlines);\n            newTabReload();\n        });\n    }\n\n    return (\n        <StyledTabs tabBarExtraContent={<StyledSetting twoToneColor=\"#a6a6a6\"/>} defaultActiveKey=\"1\" centered\n                    animated={true}>\n            <TabPane tab={\n                <span>\n                    <AimOutlined/>\n                    New\n                </span>\n            } key=\"1\">\n                <Submission onSubmit={handleAdd}/>\n            </TabPane>\n            <TabPane tab={\n                <span>\n                    <BarsOutlined/>\n                    List\n                </span>\n            } key=\"2\">\n                <DeadlineList data={deadlines} onDelete={handleDelete}/>\n            </TabPane>\n        </StyledTabs>\n    );\n}\n\nexport default Menu;"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;;AAAA;AAIA;;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"static/js/index.834c56f7.chunk.js","sources":["/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/index.css","/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/DatePicker.js","/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/deadlineList.js","webpack:///./src/popup/index.css?86a0","/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/index.js","/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/menu.js","/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/pinnedDeadline.js","/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/submission.js","/Users/alfian/Documents/Project/OSS/extension/deadviz/src/utils.js"],"sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = require(\"-!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../node_modules/postcss-loader/src/index.js??postcss!antd/dist/antd.css\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\nexports.push([module.id, \".full-width {\\n    width: 100%;\\n}\\n\\n.centered {\\n    display: block;\\n    margin: 0 auto;\\n}\\n\\n.ant-tabs-nav-wrap {\\n    margin-left: 48px !important;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import dayjsGenerateConfig from 'rc-picker/lib/generate/dayjs';\nimport generatePicker from 'antd/lib/date-picker/generatePicker';\nimport 'antd/lib/date-picker/style/index';\n\nconst DatePicker = generatePicker(dayjsGenerateConfig);\n\nexport default DatePicker;","import React, { Fragment } from \"react\";\nimport styled from 'styled-components';\n\nimport {List, Button, Popconfirm, Divider} from 'antd';\nimport {DeleteOutlined, PushpinFilled} from '@ant-design/icons';\nimport PinnedDeadline from \"./pinnedDeadline\";\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;  \n`;\n\nconst StyledList = styled(List)`\n    padding: 16px;\n`;\n\nconst DeadlineList = ({pinned, data, onPin, onUnpin, onDelete}) => {\n    const formatDate = date => `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n    const formatDescription = item => `${formatDate(new Date(item.start))} ~ ${formatDate(new Date(item.end))}`;\n\n    console.log(pinned)\n    return (\n        <Container>\n            {pinned ? <Fragment>\n                <PinnedDeadline\n                    title={pinned.name}\n                    description={formatDescription(pinned)}\n                    onUnpin={onUnpin}\n                />\n                <Divider />\n            </Fragment> : null}\n            <StyledList\n                itemLayout=\"horizontal\"\n                dataSource={data}\n                renderItem={(item, index) => (\n                    <List.Item\n                        actions={[\n                            <Popconfirm\n                                title=\"Are you sure？\"\n                                okText=\"Yes\"\n                                placement=\"left\"\n                                cancelText=\"No\"\n                                onConfirm={() => onPin(index)}>\n                                <PushpinFilled />\n                            </Popconfirm>,\n                            <Popconfirm\n                                title=\"Are you sure？\"\n                                okText=\"Yes\"\n                                placement=\"left\"\n                                cancelText=\"No\"\n                                onConfirm={() => onDelete(item.id, index)}>\n                                <Button\n                                    type=\"primary\"\n                                    danger\n                                    shape=\"circle\"\n                                    icon={\n                                        <DeleteOutlined />\n                                    }/>\n                            </Popconfirm>]}>\n                        <List.Item.Meta\n                            title={item.name}\n                            description={formatDescription(item)}\n                        />\n                    </List.Item>\n                )}\n            />\n        </Container>\n    );\n}\n\nexport default DeadlineList;","\nvar content = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../node_modules/postcss-loader/src/index.js??postcss!./index.css\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Menu from \"./menu\";\n\nimport './index.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Menu/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);","/*global chrome*/\nimport React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport {Tabs} from 'antd';\nimport {AimOutlined, BarsOutlined, SettingTwoTone} from '@ant-design/icons';\n\nimport { isEmptyObject } from \"../utils\";\nimport DeadlineList from \"./deadlineList\";\nimport Submission from \"./submission\";\n\n\n\nconst {TabPane} = Tabs;\n\nconst StyledTabs = styled(Tabs)`\n    width: 300px;\n`;\n\nconst StyledSetting = styled(SettingTwoTone)`\n    margin-right: 16px;\n`;\n\nconst newTabURL = \"chrome://newtab/\";\n\nconst Menu = () => {\n    const [deadlines, setDeadlines] = useState([]);\n    const [existingPinnedDeadline, setExistingPinnedDeadline] = useState({});\n\n    useEffect(() => {\n        chrome.storage.sync.get(['deadlines', 'pinned'], data => {\n            console.log(data);\n            if (!data) {\n                return\n            }\n\n            if (!!data.pinned) {\n                setExistingPinnedDeadline(data.pinned);\n            }\n\n            if (!!data.deadlines) {\n                setDeadlines(data.deadlines);\n            }\n\n        });\n    }, []);\n\n    const newTabReload = () => {\n        chrome.tabs.getCurrent(tab => {\n            if (tab.url === newTabURL) {\n                chrome.tabs.reload();\n            }\n        });\n    }\n\n    const handleDelete = (id, index) => {\n        const newDeadlines = [...deadlines.slice(0, index), ...deadlines.slice(index + 1)];\n        chrome.storage.sync.set({deadlines: newDeadlines}, () => {\n            console.log(`Deadline with ID ${id} has been deleted`);\n            setDeadlines(newDeadlines);\n            newTabReload();\n        });\n    }\n\n    const handleAdd = ({name, start, end}) => {\n        const deadline = {\n            id: Date.now(),\n            name,\n            start: start.toJSON(),\n            end: end.toJSON()\n        };\n\n        const newDeadlines = [...deadlines, deadline];\n\n        chrome.storage.sync.set({deadlines: newDeadlines}, function () {\n            console.log('new goal/plan has been added');\n            setDeadlines(newDeadlines);\n            newTabReload();\n        });\n    }\n\n    const handlePin = (index) => {\n        const pinnedDeadline = deadlines[index];\n        const newDeadlines = [...deadlines.slice(0, index), ...deadlines.slice(index + 1)];\n\n        // check if there is no existing pinned deadline\n        if (!isEmptyObject(existingPinnedDeadline)) {\n            newDeadlines.push(existingPinnedDeadline);\n        }\n\n        // if there is an existing pinned deadline then swap\n        chrome.storage.sync.set({\n            deadlines: newDeadlines,\n            pinned: pinnedDeadline,\n        }, function () {\n            console.log('a new pinned deadline has been set');\n            setExistingPinnedDeadline(pinnedDeadline)\n            setDeadlines(newDeadlines);\n            newTabReload();\n        });\n    };\n\n    const handleUnpin = () => {\n        if (isEmptyObject(existingPinnedDeadline)) {\n            return\n        }\n\n        deadlines.push(existingPinnedDeadline);\n        chrome.storage.sync.set({\n            deadlines,\n            pinned: {},\n        }, function () {\n            console.log('a new pinned deadline has been set');\n            setExistingPinnedDeadline({})\n            setDeadlines(deadlines);\n            newTabReload();\n        });\n    }\n\n\n    return (\n        <StyledTabs tabBarExtraContent={<StyledSetting twoToneColor=\"#a6a6a6\"/>} defaultActiveKey=\"1\" centered\n                    animated={true}>\n            <TabPane tab={\n                <span>\n                    <AimOutlined/>\n                    New\n                </span>\n            } key=\"1\">\n                <Submission onSubmit={handleAdd}/>\n            </TabPane>\n            <TabPane tab={\n                <span>\n                    <BarsOutlined/>\n                    List\n                </span>\n            } key=\"2\">\n                <DeadlineList\n                    pinned={isEmptyObject(existingPinnedDeadline) ? undefined : existingPinnedDeadline}\n                    data={deadlines}\n                    onPin={handlePin}\n                    onUnpin={handleUnpin}\n                    onDelete={handleDelete}/>\n            </TabPane>\n        </StyledTabs>\n    );\n}\n\nexport default Menu;","import React from \"react\";\nimport styled from \"styled-components\";\nimport {Popconfirm, Typography} from 'antd';\nimport {PushpinTwoTone} from '@ant-design/icons';\n\nconst { Title } = Typography;\n\nconst Container = styled.div`\n    text-align: center;\n    position: relative;\n`;\n\nconst Unpin = styled.span`\n    position: absolute;\n    top: 0px;\n    right: 16px;\n`;\n\nconst PinnedDeadline = ({title, description, onUnpin}) => (\n    <Container>\n        <Title level={3} strong>{title}</Title>\n        <Title level={5} type=\"secondary\">{description}</Title>\n        <Unpin>\n            <Popconfirm\n                title=\"Are you sure？\"\n                okText=\"Yes\"\n                placement=\"left\"\n                cancelText=\"No\"\n                onConfirm={() => onUnpin()}>\n                <PushpinTwoTone height={32} width={32}/>\n            </Popconfirm>\n        </Unpin>\n    </Container>\n);\n\nexport default PinnedDeadline;\n\n","import React from \"react\";\nimport styled from 'styled-components';\nimport dayjs from 'dayjs';\n\nimport {Form, Input, Tooltip, Button } from 'antd';\nimport DatePicker from \"./DatePicker\";\nimport {QuestionCircleOutlined, UnorderedListOutlined} from '@ant-design/icons';\n\nconst StyledForm = styled(Form)`\n    padding: 16px;\n`;\n\nconst StyledButton = styled(Button)`\n    margin-top: 16px;\n`;\n\nconst Submission = ({onSubmit}) => {\n    const [form] = Form.useForm();\n\n    const onFinish = values => {\n        onSubmit(values);\n        form.resetFields();\n    };\n\n    return (\n        <StyledForm\n            requiredMark={false}\n            form={form}\n            onFinish={onFinish}\n        >\n            <Form.Item name=\"name\" label={\n                <span>\n                    Name&nbsp;\n                    <Tooltip title=\"What's your plan/goal?\">\n                      <QuestionCircleOutlined/>\n                    </Tooltip>\n                  </span>\n            } hasFeedback rules={[{required: true, message: 'Please input your plan/goal', whitespace: true}]}>\n                <Input placeholder=\"My ultimate goal\"/>\n            </Form.Item>\n            <Form.Item name=\"start\" label={\n                <span>\n                    Start&nbsp;\n                    <Tooltip title=\"Goal's Start Date\">\n                      <QuestionCircleOutlined/>\n                    </Tooltip>\n                  </span>\n            }\n                       initialValue={dayjs()}\n                       hasFeedback\n                       dependencies={['end']}\n                       rules={[\n                           {type: 'object', required: true, message: 'Please select start time'},\n                           ({getFieldValue}) => ({\n                               validator(rule, value) {\n                                   if (!value || getFieldValue('end') > value) {\n                                       return Promise.resolve();\n                                   }\n                                   return Promise.reject('The start date should be before end date');\n                               },\n                           })]}>\n                <DatePicker initialValues={dayjs()} className=\"full-width\"/>\n            </Form.Item>\n            <Form.Item name=\"end\" label={\n                <span>\n                    End&nbsp;\n                    <Tooltip title=\"Goal's End Date\">\n                      <QuestionCircleOutlined/>\n                    </Tooltip>\n                  </span>\n            }\n                       hasFeedback\n                       initialValue={dayjs().add(1, 'y')}\n                       dependencies={['start']}\n                       rules={[\n                           {type: 'object', required: true, message: 'Please select end time'},\n                           ({getFieldValue}) => ({\n                               validator(rule, value) {\n                                   if (!value || getFieldValue('start') < value) {\n                                       return Promise.resolve();\n                                   }\n                                   return Promise.reject('The end date should be after start date');\n                               },\n                           })]}>\n                <DatePicker initialValues={dayjs().add(1, 'y')} className=\"full-width\"/>\n            </Form.Item>\n            <Form.Item>\n                <StyledButton size=\"large\" icon={<UnorderedListOutlined/>} shape=\"round\" className=\"centered\" type=\"primary\"\n                        htmlType=\"submit\">\n                    add to list\n                </StyledButton>\n            </Form.Item>\n        </StyledForm>\n    );\n}\n\nexport default Submission;","export const isEmptyObject = obj => obj ? Object.keys(obj).length === 0 && obj.constructor === Object : false;"],"mappings":"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","sourceRoot":""}
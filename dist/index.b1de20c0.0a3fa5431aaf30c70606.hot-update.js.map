{"version":3,"file":"index.b1de20c0.0a3fa5431aaf30c70606.hot-update.js","sources":["/Users/alfian/Documents/Project/OSS/extension/deadviz/src/visualizer/visualizer.js"],"sourcesContent":["/*global chrome*/\nimport React, {useEffect, useState} from \"react\";\nimport Title from \"./title\";\n\nconst parseData = deadlines => {\n    const random = Math.ceil(Math.random() * 100)\n    const index = random % deadlines.length\n\n    const deadline = deadlines[index];\n\n    let startDate = new Date(deadline.start);\n    let endDate = new Date(deadline.end);\n    let summaryUnit = \"days\";\n    let numOfBoxes = this.getDiffDay(startDate, endDate)\n    if (numOfBoxes > 30) {\n        summaryUnit = \"weeks\";\n        numOfBoxes = this.getDiffWeek(startDate, endDate);\n    }\n    const now = new Date();\n\n    let passedCount = 0;\n\n    let boxes = [];\n\n    for (let i = 1; i <= numOfBoxes; i++) {\n\n        if (summaryUnit === 'days') {\n            startDate.setDate(startDate.getDate() + 1)\n        } else {\n            startDate.setDate(startDate.getDate() + 7)\n        }\n\n        if (startDate > now) {\n            boxes.push({passed: false})\n        } else {\n            passedCount++;\n            boxes.push({passed: true})\n        }\n    }\n\n    const remainingDays = numOfBoxes - passedCount;\n    const percentage = (passedCount / numOfBoxes * 100).toFixed(2);\n\n    return {\n        name: deadline.name,\n        boxes,\n        summary: `${remainingDays} ${summaryUnit} remaining (${percentage}%)`\n    }\n}\n\n\nconst Visualizer = () => {\n\n    const [deadlines, setDeadlines] = useState([]);\n\n    useEffect(() => {\n        chrome.storage.sync.get('deadlines', data => {\n            const { name, boxes, summary } = this.parseData(data.deadlines);\n            this.name = name;\n            this.boxes = boxes;\n            this.summary = summary;\n        })\n    })\n\n    return (\n        <div>\n            <Title />\n        </div>\n    );\n}\n\nexport default Visualizer;"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"index.834c56f7.fc48c13838846bb77e4a.hot-update.js","sources":["/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/deadlineList.js","/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/menu.js","/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/submission.js"],"sourcesContent":["import React from \"react\";\nimport styled from 'styled-components';\n\nimport { List } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\n\nconst StyledList = styled(List)`\n    padding: 16px;\n`;\n\nconst DeadlineList = ({data, onDelete}) => {\n    const formatDate = date => `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n    const formatDescription = item => `${formatDate(new Date(item.start))} ~ ${formatDate(new Date(item.end))}`;\n\n    return (\n        <StyledList\n            itemLayout=\"horizontal\"\n            dataSource={data}\n            renderItem={(item, index) => (\n                <List.Item\n                    actions={[<DeleteTwoTone onClick={() => onDelete(item.id, index)} twoToneColor=\"#eb2f96\"/>]}>\n                    <List.Item.Meta\n                        title={item.title}\n                        description={formatDescription(item)}\n                    />\n                </List.Item>\n            )}\n        />\n    );\n}\n\nexport default DeadlineList;","/*global chrome*/\nimport React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport { Tabs } from 'antd';\nimport DeadlineList from \"./deadlineList\";\nimport Submission from \"./submission\";\n\nconst { TabPane } = Tabs;\n\nconst StyledTabs = styled(Tabs)`\n    width: 300px;\n`;\n\nconst newTabURL = \"chrome://newtab/\";\n\nconst Menu = () => {\n    const [deadlines, setDeadlines] = useState([]);\n\n    useEffect(() => {\n        chrome.storage.sync.get('deadlines', data => {\n            if (Array.isArray(data.deadline)) {\n                setDeadlines(data.deadlines);\n            }\n        });\n    })\n\n    const handleDelete = (id, index) => {\n        const newDeadlines = [...deadlines.slice(0, index), ...deadlines.slice(index+1)];\n        chrome.storage.sync.set({ deadlines: newDeadlines }, () => {\n            console.log(`Deadline with ID ${id} has been deleted`);\n            setDeadlines(newDeadlines);\n            chrome.tabs.getCurrent()\n        });\n    }\n\n    const handleAdd = ({name, start, end}) => {\n        const deadline = {\n            id: Date.now(),\n            name,\n            start: start.toJSON(),\n            end: end.toJSON()\n        };\n\n        const newDeadlines = [...deadlines, deadline];\n\n        chrome.storage.sync.set({ deadlines: newDeadlines }, function() {\n            console.log('new goal/plan has been added');\n            setDeadlines(newDeadlines);\n            chrome.tabs.reload();\n        });\n    }\n\n    return (\n        <StyledTabs defaultActiveKey=\"1\" centered animated>\n            <TabPane tab=\"New\" key=\"1\">\n                <Submission onSubmit={handleAdd}/>\n            </TabPane>\n            <TabPane tab=\"List\" key=\"2\">\n                <DeadlineList data={deadlines} onDelete={handleDelete}/>\n            </TabPane>\n        </StyledTabs>\n    );\n}\n\nexport default Menu;","import React from \"react\";\nimport styled from 'styled-components';\nimport { Form, Input, Tooltip, Button, DatePicker } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\n\nconst StyledForm = styled(Form)`\n    padding: 16px;\n`;\n\nconst Submission = ({onSubmit}) => {\n    const [form] = Form.useForm();\n\n    const onFinish = values => {\n        console.log('Success:', values);\n        onSubmit(values);\n    };\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n    };\n\n    return (\n        <StyledForm\n            form={form}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n        >\n            <Form.Item label={\n                <span>\n                    Name&nbsp;\n                            <Tooltip title=\"What's your plan/goal?\">\n                      <QuestionCircleOutlined />\n                    </Tooltip>\n                  </span>\n                    }\n                >\n                <Input placeholder=\"input placeholder\" />\n            </Form.Item>\n            <Form.Item name=\"start\"  label={\n                <span>\n                    Start&nbsp;\n                    <Tooltip title=\"Goal's Start Date\">\n                      <QuestionCircleOutlined />\n                    </Tooltip>\n                  </span>\n                } rules={[{ type: 'object', required: true, message: 'Please select time!' }]}>\n                <DatePicker className=\"full-width\"/>\n            </Form.Item>\n            <Form.Item name=\"end\" label={\n                <span>\n                    End&nbsp;\n                    <Tooltip title=\"Goal's End Date\">\n                      <QuestionCircleOutlined />\n                    </Tooltip>\n                  </span>\n                }\n                       rules={[{ type: 'object', required: true, message: 'Please select time!' }]}>\n                <DatePicker className=\"full-width\"/>\n            </Form.Item>\n            <Form.Item>\n                <Button className=\"full-width\" type=\"primary\" htmlType=\"submit\">\n                    Add\n                </Button>\n            </Form.Item>\n        </StyledForm>\n    );\n}\n\nexport default Submission;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AAEA;;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;A","sourceRoot":""}
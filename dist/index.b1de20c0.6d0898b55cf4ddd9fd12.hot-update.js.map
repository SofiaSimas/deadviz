{"version":3,"file":"index.b1de20c0.6d0898b55cf4ddd9fd12.hot-update.js","sources":["/Users/alfian/Documents/Project/OSS/extension/deadviz/src/visualizer/visualizer.js"],"sourcesContent":["/*global chrome*/\nimport React, {useEffect, useState} from \"react\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport DeadlineVisualizer from \"./deadlineVisualizer\";\nimport Welcome from \"./welcome\";\n\ndayjs.extend(relativeTime);\n\nconst dayInMilliseconds = 1000 * 60 * 60 * 24;\nconst weekInMilliseconds = dayInMilliseconds * 7;\n\nconst getDiffTime = (startDate, endDate) => Math.abs(endDate - startDate);\n\nconst getDiffDay = (startDate, endDate) => {\n    const diffTime = getDiffTime(startDate, endDate);\n    return Math.ceil(diffTime / dayInMilliseconds);\n}\n\nconst getDiffWeek = (startDate, endDate) => {\n    const diffTime = getDiffTime(startDate, endDate);\n    return Math.ceil(diffTime / weekInMilliseconds);\n}\n\nconst parseData = deadlines => {\n    const random = Math.ceil(Math.random() * 100)\n    const index = random % deadlines.length\n\n    const deadline = deadlines[index];\n\n    let startDate = dayjs(deadline.start);\n    let endDate = dayjs(deadline.end);\n    let summaryUnit = \"days\";\n    let numOfBoxes = getDiffDay(startDate, endDate)\n    if (numOfBoxes > 30) {\n        summaryUnit = \"weeks\";\n        numOfBoxes = getDiffWeek(startDate, endDate);\n    }\n    const now = dayjs;\n\n    let passedCount = 0;\n\n    let boxes = [];\n\n    for (let i = 1; i <= numOfBoxes; i++) {\n        const date = dayjs(startDate);\n        const lastTime = date.fromNow();\n        const remainingTime = date.toNow();\n\n        if (startDate > now) {\n            boxes.push({passed: false, info: lastTime})\n        } else {\n            passedCount++;\n            boxes.push({passed: true, info: remainingTime})\n        }\n\n        if (summaryUnit === 'days') {\n            startDate.add(1, 'day')\n        } else {\n            startDate.add\n        }\n    }\n\n    const remainingDays = numOfBoxes - passedCount;\n    const percentage = (passedCount / numOfBoxes * 100).toFixed(2);\n\n    return {\n        name: deadline.name,\n        boxes,\n        summary: `${remainingDays} ${summaryUnit} remaining (${percentage}%)`\n    }\n}\n\nconst Visualizer = () => {\n    const [deadline, setDeadline] = useState({});\n    const [deadlineExists, setDeadlineExists] = useState(false);\n\n    useEffect(() => {\n        chrome.storage.sync.get('deadlines', data => {\n            if (!!data && !!data.deadlines) {\n                setDeadline(parseData(data.deadlines));\n                setDeadlineExists(true);\n            }\n        })\n    }, []);\n\n    return deadlineExists ? <DeadlineVisualizer deadline={deadline} /> : <Welcome />;\n}\n\nexport default Visualizer;"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}
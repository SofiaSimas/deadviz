{"version":3,"file":"index.834c56f7.9714badca0aa0b51399a.hot-update.js","sources":["/Users/alfian/Documents/Project/OSS/extension/deadviz/src/popup/submission.js"],"sourcesContent":["import React from \"react\";\nimport styled from 'styled-components';\nimport dayjs from 'dayjs';\n\nimport {Form, Input, Tooltip, Button } from 'antd';\nimport DatePicker from \"./DatePicker\";\nimport {QuestionCircleOutlined, UnorderedListOutlined} from '@ant-design/icons';\n\nconst StyledForm = styled(Form)`\n    padding: 16px;\n`;\n\nconst StyledButton = styled(Button)`\n    margin-top: 16px;\n`;\n\nconst Submission = ({onSubmit}) => {\n    const [form] = Form.useForm();\n\n    const onFinish = values => {\n        onSubmit(values);\n        form.resetFields();\n    };\n\n    return (\n        <StyledForm\n            requiredMark={false}\n            form={form}\n            onFinish={onFinish}\n        >\n            <Form.Item name=\"name\" label={\n                <span>\n                    Name&nbsp;\n                    <Tooltip title=\"What's your plan/goal?\">\n                      <QuestionCircleOutlined/>\n                    </Tooltip>\n                  </span>\n            } hasFeedback rules={[{required: true, message: 'Please input your plan/goal', whitespace: true}]}>\n                <Input placeholder=\"My ultimate goal\"/>\n            </Form.Item>\n            <Form.Item name=\"start\" label={\n                <span>\n                    Start&nbsp;\n                    <Tooltip title=\"Goal's Start Date\">\n                      <QuestionCircleOutlined/>\n                    </Tooltip>\n                  </span>\n            }\n                       initialValue={moment()}\n                       hasFeedback\n                       dependencies={['end']}\n                       rules={[\n                           {type: 'object', required: true, message: 'Please select start time'},\n                           ({getFieldValue}) => ({\n                               validator(rule, value) {\n                                   if (!value || getFieldValue('end') > value) {\n                                       return Promise.resolve();\n                                   }\n                                   return Promise.reject('The start date should be before end date');\n                               },\n                           })]}>\n                <DatePicker defaultValue={moment()} className=\"full-width\"/>\n            </Form.Item>\n            <Form.Item name=\"end\" label={\n                <span>\n                    End&nbsp;\n                    <Tooltip title=\"Goal's End Date\">\n                      <QuestionCircleOutlined/>\n                    </Tooltip>\n                  </span>\n            }\n                       hasFeedback\n                       initialValue={moment().add(1, 'y')}\n                       dependencies={['start']}\n                       rules={[\n                           {type: 'object', required: true, message: 'Please select end time'},\n                           ({getFieldValue}) => ({\n                               validator(rule, value) {\n                                   if (!value || getFieldValue('start') < value) {\n                                       return Promise.resolve();\n                                   }\n                                   return Promise.reject('The end date should be after start date');\n                               },\n                           })]}>\n                <DatePicker defaultValue={moment().add(1, 'y')} className=\"full-width\"/>\n            </Form.Item>\n            <Form.Item>\n                <StyledButton size=\"large\" icon={<UnorderedListOutlined/>} shape=\"round\" className=\"centered\" type=\"primary\"\n                        htmlType=\"submit\">\n                    add to list\n                </StyledButton>\n            </Form.Item>\n        </StyledForm>\n    );\n}\n\nexport default Submission;"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAAA;AAIA;;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;A","sourceRoot":""}